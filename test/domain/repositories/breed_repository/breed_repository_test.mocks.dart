// Mocks generated by Mockito 5.4.2 from annotations
// in dog_app/test/domain/repositories/breed_repository/breed_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:dog_app/core/network/network_info.dart' as _i6;
import 'package:dog_app/data/core/app_cache_manager.dart' as _i7;
import 'package:dog_app/data/local/breed_local_data_source.dart' as _i5;
import 'package:dog_app/data/model/breed_model.dart' as _i4;
import 'package:dog_app/data/remote/breed_remote_data_source.dart' as _i2;
import 'package:flutter_cache_manager/flutter_cache_manager.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [BreedRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedRemoteDataSource extends _i1.Mock
    implements _i2.BreedRemoteDataSource {
  MockBreedRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.BreedModel>> getBreeds() => (super.noSuchMethod(
        Invocation.method(
          #getBreeds,
          [],
        ),
        returnValue: _i3.Future<List<_i4.BreedModel>>.value(<_i4.BreedModel>[]),
      ) as _i3.Future<List<_i4.BreedModel>>);

  @override
  _i3.Future<String> getImageByBreed(String? breedName) => (super.noSuchMethod(
        Invocation.method(
          #getImageByBreed,
          [breedName],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);

  @override
  _i3.Future<List<String>> getImagesBySubBreed(
    String? breedName,
    String? subBreedName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImagesBySubBreed,
          [
            breedName,
            subBreedName,
          ],
        ),
        returnValue: _i3.Future<List<String>>.value(<String>[]),
      ) as _i3.Future<List<String>>);

  @override
  _i3.Future<String> getBreedImagesByRandom(String? breedName) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBreedImagesByRandom,
          [breedName],
        ),
        returnValue: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
}

/// A class which mocks [BreedLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockBreedLocalDataSource extends _i1.Mock
    implements _i5.BreedLocalDataSource {
  MockBreedLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.BreedModel>> getBreeds() => (super.noSuchMethod(
        Invocation.method(
          #getBreeds,
          [],
        ),
        returnValue: _i3.Future<List<_i4.BreedModel>>.value(<_i4.BreedModel>[]),
      ) as _i3.Future<List<_i4.BreedModel>>);

  @override
  _i3.Future<void> cacheBreeds(
    List<_i4.BreedModel>? breeds,
    Duration? cacheDuration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheBreeds,
          [
            breeds,
            cacheDuration,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [AppCacheManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppCacheManager extends _i1.Mock implements _i7.AppCacheManager {
  MockAppCacheManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> cacheSingleImage(String? imageUrl) => (super.noSuchMethod(
        Invocation.method(
          #cacheSingleImage,
          [imageUrl],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i8.FileInfo?> getSingleImage(String? imageUrl) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSingleImage,
          [imageUrl],
        ),
        returnValue: _i3.Future<_i8.FileInfo?>.value(),
      ) as _i3.Future<_i8.FileInfo?>);

  @override
  _i3.Future<void> removeSingleImage(String? imageUrl) => (super.noSuchMethod(
        Invocation.method(
          #removeSingleImage,
          [imageUrl],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> clearCache() => (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> cacheMultipleImages(List<String>? imageUrls) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMultipleImages,
          [imageUrls],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
